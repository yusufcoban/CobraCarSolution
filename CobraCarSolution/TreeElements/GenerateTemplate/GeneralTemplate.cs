using SmartFormat;
using SmartFormat.Core.Settings;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ToolBoxNameSpace;

namespace CobraCarSolution.TreeElements.GenerateTemplate
{
    public class GeneralTemplate
    {
        public string TitleECU = "";
        public bool hasEgrSolution = false;
        public bool hasDpfSolution = false;
        public bool hasDtcSolution = false;
        public bool hasTVASolution = false;
        public bool hasFileCheckSize = false;
        public bool hasLamdaSolution = false;
        public bool hasFLAPSSolution = false;
        public bool hasStartStopSolution = false;
        public bool hasADBlueSolution = false;
        public bool hasReadinessSolution = false;
        public bool hasImmoSolution = false;
        public bool hasSpecialISolution = false;
        public bool hasSpecialIISolution = false;
        public bool hasSpecialIIISolution = false;
        public string specialISolutionDescription = "";
        public string specialIISolutionDescription = "";
        public string specialIIISolutionDescription = "";
        public string desciption = "";
        public int fileSize = 0;

        public string FileForEgrCODE = "";
        public string FileForDpfCODE = "";
        public string FileForTvaCODE = "";
        public string FileForLamdaCODE = "";
        public string FileForFlapsCODE = "";
        public string FileForStartStopCODE = "";
        public string FileForAdBlueCODE = "";
        public string FileForReadinessCODE = "";
        public string FileForImmoCODE = "";
        public string FileForSpecialICODE = "";
        public string FileForSpecialIICODE = "";
        public string FileForSpecialIIICODE = "";



        public string checkFileForEgrCODE = "";
        public string checkFileForDpfCODE = "";
        public string checkFileForTvaCODE = "";
        public string checkFileForLamdaCODE = "";
        public string checkFileForFlapsCODE = "";
        public string checkFileForStartStopCODE = "";
        public string checkFileForAdBlueCODE = "";
        public string checkFileForReadinessCODE = "";
        public string checkFileForImmoCODE = "";
        public string checkFileForSpecialICODE = "";
        public string checkFileForSpecialIICODE = "";
        public string checkFileForSpecialIIICODE = "";



        public void GenerateCs()
        {

        }
    }

    public static class GenerateCSFile
    {
        public static string template = "using ToolBoxNameSpace;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Controls;\r\nusing System.Windows;\r\nusing System.IO;\r\n\r\nnamespace CobraCarSolution.TreeElements.VAG  {\r\n  class EcuName :MenuItem, ITreeItem  {\r\n    public EcuName()  {\r\n      Title = \"EcuName\";\r\n      IsSolutionItem =  true;\r\n      hasDtcSolution =  false;\r\n      hasEgrSolution = true;\r\n      hasTVASolution = false;\r\n      hasFileCheckSize =false;\r\n      hasDpfSolution =false;\r\n      hasLamdaSolution =false;\r\n      hasFLAPSSolution =false;\r\n      hasStartStopSolution =false;\r\n      hasADBlueSolution =false;\r\n      hasReadinessSolution =false;\r\n      hasImmoSolution =false;\r\n      hasSpecialISolution =false;\r\n      hasSpecialIISolution =false;\r\n      hasSpecialIIISolution =false;\r\n      specialISolutionDescription=\"\";\r\n      specialIISolutionDescription=\"\";\r\n      specialIIISolutionDescription=\"\";\r\n      desciption=\"\";\r\n      FileSizeArray = new int[]  {  0 };\r\n    }\r\n\r\n    public override async Task < bool > checkFileForEgr()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\t\tToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3417255    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1,0x1,0x1 },  3417258    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1,0x1,0x1 },  3417263    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3,0x3,0x3,0x1 },  3417267    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x11 },  3417282    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x11 },  3417287    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3417294    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3417344    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x6 },  3417363    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3 },  3417490    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3 },  3417492    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x11 },  3417621    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3417624    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3,0x3,0x3 },  3417626    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3,0x3,0x3,0x3,0x3 },  3417630    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1,0x3,0x3,0x11 },  3417637    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3 },  3417700    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3,0x3,0x1 },  3417860    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3417977    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1,0x1 },  3418060    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x1 },  3418149    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3,0x1 },  3418170    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x4,0x4,0x1 },  3418174    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x3 },  3418262    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3461960    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3,0x253,0x3,0x253,0x3 },  3461966    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3461976    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x189,0x3,0x189,0x3 },  3461988    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3462038    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3462430    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3462434    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3462692    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3462698    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x3 },  3462704    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x3,0x245,0x3,0x245,0x3,0x245,0x3,0x245,0x3 },  3462710    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x3 },  3462724    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x3,0x245,0x3 },  3462728    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x3,0x245,0x3 },  3462850    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x73,0x246 },  3463170    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x252,0x3 },  3463404    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3 },  3463790    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x253,0x3,0x253,0x3,0x253,0x3,0x253,0x3 },  3463796    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x245,0x1 },  3463974    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x196,0x9,0x128,0x12,0x216,0x14,0x216,0x14,0x52,0x8 },  3780042    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x196,0x9,0x128,0x12,0x216,0x14,0x136,0x19,0x136,0x19,0x136,0x19,0x232,0x3,0x244,0x1 },  3780150    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x140,0x10,0x160,0x15,0x160,0x15,0x252,0x8 },  3780180    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x220,0x5,0x140,0x10,0x72,0x13,0x4,0x16,0x148,0x17,0x236,0x19,0x236,0x19,0x100 },  3780394    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x152,0x8,0x184,0x11,0x16,0x14,0x16,0x14,0x8,0x7 },  3780422    );\r\nToolBox.ExistsInFileMultiple(new byte[]  {0x120,0x5,0x40,0x10,0x228,0x12,0x160,0x15,0x48,0x17,0x136,0x19,0x136,0x19 },  3780634    );\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n    public override async Task < bool > checkFileForDpf()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n\r\n    }\r\n    public override async Task < bool > checkFileForTva()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForLamda()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForFlaps()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForStartStop()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForAdBlue()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForReadiness()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForImmo()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForSpecialI()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForSpecialII()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override async Task < bool > checkFileForSpecialIII()  {\r\n      bool validationEgrInFile = true;\r\n      //Algo for checking dpf solution\r\n      if (ToolBox.array.Length > 0)  {\r\n\r\n      }\r\n      return validationEgrInFile;\r\n    }\r\n\r\n    public override void egrOffSolution()  {\r\n\tToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3417255,3417255, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1,0x1,0x1 },\r\n new byte[]  { 0x0,0x0,0x0 },3417258,3417260, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1,0x1,0x1 },\r\n new byte[]  { 0x0,0x0,0x0 },3417263,3417265, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3,0x3,0x3,0x1 },\r\n new byte[]  { 0x0,0x0,0x0,0x0 },3417267,3417270, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x11 },\r\n new byte[]  { 0x0 },3417282,3417282, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x11 },\r\n new byte[]  { 0x0 },3417287,3417287, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3417294,3417294, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3417344,3417344, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x6 },\r\n new byte[]  { 0x0 },3417363,3417363, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3 },\r\n new byte[]  { 0x0 },3417490,3417490, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3 },\r\n new byte[]  { 0x0 },3417492,3417492, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x11 },\r\n new byte[]  { 0x0 },3417621,3417621, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3417624,3417624, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3,0x3,0x3 },\r\n new byte[]  { 0x0,0x0,0x0 },3417626,3417628, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3,0x3,0x3,0x3,0x3 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0 },3417630,3417634, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1,0x3,0x3,0x11 },\r\n new byte[]  { 0x0,0x0,0x0,0x0 },3417637,3417640, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3 },\r\n new byte[]  { 0x0 },3417700,3417700, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3,0x3,0x1 },\r\n new byte[]  { 0x0,0x0,0x0 },3417860,3417862, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3417977,3417977, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1,0x1 },\r\n new byte[]  { 0x0,0x0 },3418060,3418061, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x1 },\r\n new byte[]  { 0x0 },3418149,3418149, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3,0x1 },\r\n new byte[]  { 0x0,0x0 },3418170,3418171, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x4,0x4,0x1 },\r\n new byte[]  { 0x0,0x0,0x0 },3418174,3418176, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x3 },\r\n new byte[]  { 0x0 },3418262,3418262, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3461960,3461961, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3,0x253,0x3,0x253,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255,0x255,0x255 },3461966,3461971, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3461976,3461977, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x189,0x3,0x189,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255 },3461988,3461991, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3462038,3462039, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3462430,3462431, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3462434,3462435, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3462692,3462693, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3462698,3462699, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x3 },\r\n new byte[]  { 0x255,0x255 },3462704,3462705, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x3,0x245,0x3,0x245,0x3,0x245,0x3,0x245,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255,0x255,0x255,0x255,0x255,0x255,0x255 },3462710,3462719, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x3 },\r\n new byte[]  { 0x255,0x255 },3462724,3462725, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x3,0x245,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255 },3462728,3462731, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x3,0x245,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255 },3462850,3462853, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x73,0x246 },\r\n new byte[]  { 0x255,0x255 },3463170,3463171, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x252,0x3 },\r\n new byte[]  { 0x255,0x255 },3463404,3463405, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3 },\r\n new byte[]  { 0x255,0x255 },3463790,3463791, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x253,0x3,0x253,0x3,0x253,0x3,0x253,0x3 },\r\n new byte[]  { 0x255,0x255,0x255,0x255,0x255,0x255,0x255,0x255 },3463796,3463803, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x245,0x1 },\r\n new byte[]  { 0x255,0x255 },3463974,3463975, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x196,0x9,0x128,0x12,0x216,0x14,0x216,0x14,0x52,0x8 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780042,3780051, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x196,0x9,0x128,0x12,0x216,0x14,0x136,0x19,0x136,0x19,0x136,0x19,0x232,0x3,0x244,0x1 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780150,3780165, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x140,0x10,0x160,0x15,0x160,0x15,0x252,0x8 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780180,3780187, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x220,0x5,0x140,0x10,0x72,0x13,0x4,0x16,0x148,0x17,0x236,0x19,0x236,0x19,0x100 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780394,3780408, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x152,0x8,0x184,0x11,0x16,0x14,0x16,0x14,0x8,0x7 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780422,3780431, \"Found egr map...Delete map\");\r\nToolBox.ReplaceInFileWithStartStop(new byte[]  {0x120,0x5,0x40,0x10,0x228,0x12,0x160,0x15,0x48,0x17,0x136,0x19,0x136,0x19 },\r\n new byte[]  { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 },3780634,3780647, \"Found egr map...Delete map\");\r\n      base.egrOffSolution();\r\n    }\r\n    public override void dpfOffSolution()  {\r\n\t\r\n      base.dpfOffSolution();\r\n    }\r\n    public override void lamdaOfffSolution()  {\r\n\t\r\n      base.lamdaOfffSolution();\r\n\r\n    }\r\n\r\n    public override void flapsOfffSolution()  {\r\n\t\r\n\r\n      base.flapsOfffSolution();\r\n    }\r\n    public override void startStopSolution()  {\r\n\t\r\n\r\n      base.startStopSolution();\r\n    }\r\n\r\n    public override void adBlueSolution()  {\r\n\t\r\n\r\n      base.adBlueSolution();\r\n    }\r\n\r\n    public override void readnissSolution()  {\r\n\t\r\n\r\n      base.readnissSolution();\r\n    }\r\n    public override void immoSolution()  {\r\n\t\r\n      base.immoSolution();\r\n\r\n    }\r\n\r\n    public override void tvaoffSolution()  {\r\n\t\r\n\r\n      base.tvaoffSolution();\r\n    }\r\n\r\n    public override void specialISolution()  {\r\n\t\r\n\r\n      base.specialISolution();\r\n    }\r\n    public override void specialIISolution()  {\r\n\t\r\n      base.specialIISolution();\r\n\r\n    }\r\n\r\n    public override void specialIIISolution()  {\r\n\t\r\n      base.specialIIISolution();\r\n\r\n    }\r\n\r\n    public List < string > getListOfDtcCodes()  {\r\n      return null;\r\n    }\r\n\r\n    public override void RemoveDtcFromFile(string dtcCode)  {\r\n\r\n      base.RemoveDtcFromFile(dtcCode);\r\n    }\r\n\r\n  }\r\n}";
        public static void GenerateFile(GeneralTemplate fileInput, string filePath)
        {
            string generatedFile = Smart.Format(template, fileInput);
            generatedFile = generatedFile.Replace("doubleBrackedClosed", "}");
            generatedFile = generatedFile.Replace("doubleBrackedOpen", " {");
            generatedFile = generatedFile.Replace("StricheOben", "\"");
            generatedFile = generatedFile.Replace("False", "false");
            generatedFile = generatedFile.Replace("True", "true");

            Microsoft.Win32.SaveFileDialog saveDialog = new Microsoft.Win32.SaveFileDialog();

            saveDialog.FileName = fileInput.TitleECU + ".cs";
            saveDialog.Filter = "cs (*.cs)|*.cs";
            if (saveDialog.ShowDialog() == true)
            {
                File.WriteAllText(saveDialog.FileName, generatedFile); // Requires System.IO
            }
        }
    }


}
