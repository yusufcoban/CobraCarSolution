using ToolBoxNameSpace;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows;
using System.IO;

namespace CobraCarSolution.TreeElements.VAG
{
    class VAG_EDC16U1 : MenuItem, ITreeItem
    {

        public VAG_EDC16U1()
        {
            Title = "EDC16U1";
            IsSolutionItem = true;
            hasEgrSolution = true;
            hasDpfSolution = false;
            hasDtcSolution = false;
        }

        public bool checkForFileSize()
        {
            if (ToolBox.array.Count() == 1048576)
            {
                ToolBox.AddLineToConsoleBox("Flash loaded with success...");
                return true;
            }
            ToolBox.AddLineToConsoleBox("File not recognized...");

            return false;
        }

        public override void initFunction()
        {

            ToolBox.AddLineToConsoleBox("VAG_EDC16CP45 selected...");
            if (checkForFileSize())
            {
                checkFileForEgr();
            }
            else
            {
                ToolBox.ResetStateAndFile();
            }
        }

        public override void checkFileForEgr()
        {
            bool validationEgrInFile = false;
            //Algo for checking dpf solution
            if (ToolBox.array.Length > 0)
            {
                if (ToolBox.ExistsInFile(new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03 }))
                {
                    if (ToolBox.ExistsInFile(new byte[] { 0x03 ,0x84 ,0x07 ,0xD0 ,0x07 ,0xD0 ,0x09 ,0x60 ,0x0C ,0x1C ,0x0E ,0xD8 ,0x10 ,0x04 ,0x10 ,0x9A
                                ,0x11 ,0x30 ,0x11 ,0x30 ,0x10 ,0xCC ,0x0E ,0x74 ,0x03 ,0xE8 }))
                    {
                        if (ToolBox.ExistsInFile(new byte[] { 0x03 ,0xE8 ,0x08 ,0x34 ,0x08 ,0x34
                            ,0x09 ,0xC4 ,0x0C ,0x80 ,0x0F ,0x3C ,0x10 ,0x68 ,0x10 ,0xFE
                            ,0x11 ,0x94 ,0x11 ,0x94 ,0x11 ,0x30 ,0x0E ,0xD8 ,0x04 ,0xE2 }))
                        {
                            if (ToolBox.ExistsInFile(new byte[] {
                            0x03 ,0x84 ,0x07 ,0xD0 ,0x07 ,0xD0 ,0x08 ,0x98 ,0x09
                            ,0x60 ,0x0A ,0x28 ,0x0B ,0xB8 ,0x0D ,0xDE
                            ,0x10 ,0x04 ,0x10 ,0xCC ,0x10 ,0x68 ,0x0D ,0x48 ,0x03 ,0xE8
                            }))
                            {
                                if (ToolBox.ExistsInFile(new byte[] {
                                     0x03 ,0xE8 ,0x08 ,0x34 ,0x08 ,0x34 ,0x08 ,0xFC ,0x09 ,0xC4 ,0x0A ,0x8C ,0x0C ,0x1C ,0x0E ,0x42
                                    ,0x10 ,0x68 ,0x11 ,0x30 ,0x10 ,0xCC ,0x0D ,0xAC ,0x04 ,0xE2
                                 }))
                                {
                                    validationEgrInFile = true;
                                    ToolBox.AddLineToConsoleBox("EGR Maps found in data...");
                                    ToolBox.setEgrButtonState(1);
                                }
                            }
                        }
                    }
                }
            }
            if (!validationEgrInFile)
            {
                ToolBox.AddLineToConsoleBox("EGR Maps not found in data...");
                ToolBox.setEgrButtonState(1, true);
            }

        }


        public override void egrOffSolution()
        {
            ToolBox.ReplaceInFile(new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00 }, "Found egr map...Delete map");
            ToolBox.ReplaceInFile(new byte[] { 0x03 ,0x84 ,0x07 ,0xD0 ,0x07 ,0xD0 ,0x09 ,0x60 ,0x0C ,0x1C ,0x0E ,0xD8 ,0x10 ,0x04 ,0x10 ,0x9A
                                ,0x11 ,0x30 ,0x11 ,0x30 ,0x10 ,0xCC ,0x0E ,0x74 ,0x03 ,0xE8 },
                                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "Found egr map...Delete map");
            ToolBox.ReplaceInFile(new byte[] { 0x03, 0xE8, 0x08, 0x34, 0x08, 0x34
                        , 0x09, 0xC4, 0x0C, 0x80, 0x0F, 0x3C, 0x10, 0x68, 0x10, 0xFE
                        , 0x11, 0x94, 0x11, 0x94, 0x11, 0x30, 0x0E, 0xD8, 0x04, 0xE2 },
                        new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "Found egr map...Delete map");
            ToolBox.ReplaceInFile(new byte[] {
                        0x03, 0x84, 0x07, 0xD0, 0x07, 0xD0, 0x08, 0x98, 0x09
                                 , 0x60, 0x0A, 0x28, 0x0B, 0xB8, 0x0D, 0xDE
                                 , 0x10, 0x04, 0x10, 0xCC, 0x10, 0x68, 0x0D, 0x48, 0x03, 0xE8
                          }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "Found egr map...Delete map");
            ToolBox.ReplaceInFile(new byte[] {
                        0x03, 0xE8, 0x08, 0x34, 0x08, 0x34, 0x08, 0xFC, 0x09, 0xC4, 0x0A, 0x8C, 0x0C, 0x1C, 0x0E, 0x42
                                            , 0x10, 0x68, 0x11, 0x30, 0x10, 0xCC, 0x0D, 0xAC, 0x04, 0xE2
                    }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "Found egr map...Delete map");

            base.egrOffSolution();
        }
        public void dpfOffSolution()
        {
            throw new NotImplementedException();

        }

        public List<string> getListOfDtcCodes()
        {
            // get list of all dtcs, Dtc code, mask, current state
            return null;
        }
        public override void RemoveDtcFromFile(string dtcCode)
        {
            //Find dtccodes
            //show how often found in file
            //+
            //36from file and call base function
            base.RemoveDtcFromFile(dtcCode);
        }

    }
}
